Create a full-stack AI Task Optimization System with the following specifications:

### Backend Requirements
- **Programming Language**: Python
- **Framework**: FastAPI
- **Database**: SQLite or PostgreSQL
- **Key Modules**:
  - **Task Management**: Implement task creation, sorting, and dependencies using Merge Sort.
  - **Smart Task Allocation**: Allocate tasks based on employee efficiency and workload using Min-Heap.
  - **Real-Time Workload Balancing**: Reassign tasks dynamically using the Knapsack Algorithm.
  - **Urgent Task Handling**: Prioritize urgent tasks and rebalance workload using Branch & Bound.
  
### Database Models
1. **Employee Table**:
   - Fields: employee_id (INT), name (VARCHAR), efficiency_score (FLOAT), current_workload (INT)
2. **Task Table**:
   - Fields: task_id (INT), title (VARCHAR), description (TEXT), priority (INT), status (ENUM), assigned_employee_id (INT), dependencies (LIST), urgency_flag (BOOLEAN)

### Frontend Requirements
- **Framework**: React.js
- **State Management**: Redux
- **Visualization**: D3.js or Recharts
- **Key Components**:
  - **Dashboard**: Display current task assignments and employee workloads.
  - **Task Management**: Interface for adding, editing, and marking tasks as complete.
  - **Employee Management**: View employee load and efficiency metrics.
  - **Urgent Task Panel**: Trigger urgent tasks for immediate attention.
  - **Analytics Dashboard**: Visualize workload, efficiency, and completion rates.

### API Endpoints
- **Task API**: `/task/create`, `/task/fetch`, `/task/update`
- **Employee API**: `/employee/register`, `/employee/update`
- **Assignment API**: `/assign/tasks`
- **Urgent API**: `/urgent/task`

### Implementation Steps
1. Set up FastAPI backend and create database models.
2. Implement algorithms for sorting, task allocation, and workload balancing.
3. Develop React frontend project with necessary components.
4. Integrate API calls using Axios for data fetching and updates.
5. Design dashboard UI with real-time visualizations.
6. Conduct end-to-end testing of task creation, assignment, and urgent reallocation.
7. Prepare for final deployment.

### Additional Features
- Dynamic efficiency scoring for employees.
- Real-time updates on task status and workload.
- Analytics dashboard to monitor trends over time.

### Final Objective
Build a modular and scalable AI Task Optimization System that effectively manages task assignments, balances workloads, and enhances productivity through intelligent automation.